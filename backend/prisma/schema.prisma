generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id @default(uuid())
  email               String           @unique
  password            String
  firstname           String?
  lastname            String?
  isPendingDeletion   Boolean          @default(false)
  deletionRequestedAt DateTime?
  deletionGraceUntil  DateTime?
  deletionReason      String?
  deletionCancelToken String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  // 1:1 relation with Profile
  profile             Profile?

  // 1:N relations
  jobApplications     JobApplication[]
  educations          Education[]
  certifications      Certification[]
  projects            Project[]
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName String?
  bio         String?
  location    String?
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model JobApplication {
  id            String            @id @default(uuid())
  companyName   String
  positionTitle String
  status        ApplicationStatus @default(APPLIED)
  appliedDate   DateTime?
  notes         String?
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ApplicationStatus {
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
}

model Education {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  degree       String
  institution  String
  fieldOfStudy String?
  startDate    DateTime
  endDate      DateTime?
  ongoing      Boolean   @default(false)
  gpa          Float?
  showGpa      Boolean   @default(true)
  honors       String[]  @default([])
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Certification {
  id                  String             @id @default(uuid())
  userId              String
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                String
  issuingOrganization String
  dateEarned          DateTime
  expirationDate      DateTime?
  doesNotExpire       Boolean            @default(false)
  certificationNumber String?
  documentUrl         String?
  verificationStatus  VerificationStatus @default(PENDING)
  renewalReminderDays Int?
  category            String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model Project {
  id           String          @id @default(uuid())
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  description  String?
  role         String?
  startDate    DateTime
  endDate      DateTime?
  technologies String[]        @default([])
  url          String?
  teamSize     Int?
  outcomes     String?
  industry     String?
  status       ProjectStatus   @default(COMPLETED)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  media        ProjectMedia[]
}

model ProjectMedia {
  id        String     @id @default(uuid())
  projectId String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  url       String
  type      MediaType  @default(IMAGE)
  caption   String?
}

enum ProjectStatus {
  COMPLETED
  ONGOING
  PLANNED
}

enum MediaType {
  IMAGE
  VIDEO
  OTHER
}
